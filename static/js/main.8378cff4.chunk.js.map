{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","components/Chart/Chart.jsx","api/index.js","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","Chart","doughnutChart","labels","datasets","backgroundColor","borderColor","borderWidth","url","fetchData","country","a","changeableUrl","axios","get","fetchCountries","countries","map","name","CountryPicker","onCountryChange","useState","fetchedCountries","setFetchedCountries","useEffect","FormControl","formControl","NativeSelect","onChange","e","target","index","App","setData","handleCountryChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8378cff4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3Fjyk\",\"card\":\"Cards_card__1yQmF\",\"infected\":\"Cards_infected__3l0ra\",\"recovered\":\"Cards_recovered__v93JA\",\"deaths\":\"Cards_deaths__2dq88\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n    if (!confirmed) {\r\n        return 'Loading....'\r\n    }\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={3}\r\n                                separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\" />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import React from 'react';\r\nimport { Doughnut } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, deaths, recovered } }) => {\r\n    const doughnutChart = (\r\n        confirmed\r\n            ? (\r\n                <Doughnut\r\n                    data={{\r\n                        labels: ['Infected', 'Recovered', 'Deaths'],\r\n                        datasets: [{\r\n                            backgroundColor: ['rgba(255, 0, 0,0.6)',\r\n                                'rgba(0,255,0,0.6)',\r\n                                'rgba(128, 0, 128,0.6)'],\r\n                            borderColor: ['rgba(255,0,0, 1)',\r\n                                'rgba(0,255,0, 1)',\r\n                                'rgba(128,0,128, 1)'],\r\n                            borderWidth: 2,\r\n                            data: [confirmed.value, recovered.value, deaths.value]\r\n                        }],\r\n                    }}\r\n                />\r\n            ) : null\r\n    )\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            { doughnutChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n  try {\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changeableUrl);\r\n    return {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {}\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({ onCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            setFetchedCountries(await fetchCountries());\r\n        })();\r\n    }, [setFetchedCountries])\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect onChange={(e) => onCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country, index) => <option key={index} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React, { useState, useEffect } from \"react\";\r\nimport { Cards, Chart, CountryPicker } from \"./components\";\r\nimport styles from \"./App.module.css\";\r\nimport { fetchData } from \"./api\";\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState({});\r\n\r\n  const handleCountryChange = async (country) => {\r\n    setData(await fetchData(country));\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setData(await fetchData());\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Cards data={data} />\r\n      <CountryPicker onCountryChange={handleCountryChange} />\r\n      <Chart data={data} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3ys5m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2hXl1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3Yiwu\",\"image\":\"App_image__Ut_Zt\"};"],"sourceRoot":""}